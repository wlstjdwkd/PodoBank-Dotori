{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PurposeCompleteScreen(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var grantType = useSelector(function (state) {\n    return state.user.grantType;\n  });\n  var accessToken = useSelector(function (state) {\n    return state.user.accessToken;\n  });\n  var refreshToken = useSelector(function (state) {\n    return state.user.refreshToken;\n  });\n  var dispatch = useDispatch();\n  var _useState = useState(route.params.name),\n    _useState2 = _slicedToArray(_useState, 2),\n    name = _useState2[0],\n    setName = _useState2[1];\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.centerContainer,\n      children: [_jsx(Image, {\n        style: styles.centerImage,\n        source: require(\"../../assets/images/Hamster/PurposeCompleteHamster.png\")\n      }), _jsx(Text, {\n        style: styles.boldText,\n        children: name\n      }), _jsx(Text, {\n        style: styles.regularText,\n        children: \"\\uBAA9\\uD45C\\uB97C \\uC0DD\\uC131\\uD558\\uC600\\uC2B5\\uB2C8\\uB2E4!\"\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: function onPress() {\n        return navigation.navigate(\"PurposeScreen\");\n      },\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"\\uBAA9\\uD45C \\uD655\\uC778\\uD558\\uAE30\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"space-between\",\n    padding: 40,\n    backgroundColor: \"white\"\n  },\n  centerContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  centerImage: {\n    width: 200,\n    height: 200,\n    marginBottom: 40\n  },\n  boldText: {\n    fontWeight: \"bold\",\n    fontSize: 30,\n    marginBottom: 10\n  },\n  regularText: {\n    fontSize: 25\n  },\n  button: {\n    height: 40,\n    backgroundColor: \"#FF965C\",\n    borderRadius: 8,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 18\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","TouchableOpacity","StyleSheet","Image","useDispatch","useSelector","jsx","_jsx","jsxs","_jsxs","PurposeCompleteScreen","_ref","navigation","route","grantType","state","user","accessToken","refreshToken","dispatch","_useState","params","name","_useState2","_slicedToArray","setName","style","styles","container","children","centerContainer","centerImage","source","require","boldText","regularText","button","onPress","navigate","buttonText","create","flex","justifyContent","padding","backgroundColor","alignItems","width","height","marginBottom","fontWeight","fontSize","borderRadius","color"],"sources":["C:/Users/SSAFY/Desktop/S09P22D107/Dotori/frontend/src/screens/Purpose/PurposeCompleteScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  Image,\r\n} from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nexport default function PurposeCompleteScreen({ navigation, route }) {\r\n  // 토큰\r\n  const grantType =  useSelector((state)=>state.user.grantType)\r\n  const accessToken =  useSelector((state)=>state.user.accessToken)\r\n  const refreshToken =  useSelector((state)=>state.user.refreshToken)\r\n  const dispatch = useDispatch()\r\n  // 그 외\r\n\r\n  // const name = route.params.name;\r\n  const [name,setName] = useState(route.params.name);\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.centerContainer}>\r\n        <Image\r\n          style={styles.centerImage}\r\n          source={require(\"../../assets/images/Hamster/PurposeCompleteHamster.png\")}\r\n        />\r\n        {/* <Text style={styles.boldText}>\" {name} \"</Text> */}\r\n        <Text style={styles.boldText}>{name}</Text>\r\n        <Text style={styles.regularText}>목표를 생성하였습니다!</Text>\r\n      </View>\r\n\r\n      <TouchableOpacity\r\n        style={styles.button}\r\n        onPress={() => navigation.navigate(\"PurposeScreen\")}\r\n      >\r\n        <Text style={styles.buttonText}>목표 확인하기</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"space-between\",\r\n    padding: 40,\r\n    backgroundColor: \"white\",\r\n  },\r\n  centerContainer: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  centerImage: {\r\n    width: 200, // 이미지의 너비\r\n    height: 200, // 이미지의 높이\r\n    marginBottom: 40,\r\n  },\r\n  boldText: {\r\n    fontWeight: \"bold\",\r\n    fontSize: 30,\r\n    marginBottom: 10,\r\n  },\r\n  regularText: {\r\n    fontSize: 25,\r\n  },\r\n\r\n  button: {\r\n    height: 40,\r\n    backgroundColor: \"#FF965C\",\r\n    borderRadius: 8,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  buttonText: {\r\n    color: \"white\",\r\n    fontSize: 18,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}