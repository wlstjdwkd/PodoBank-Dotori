{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12;\nimport axios from \"axios\";\nvar apiAddress = \"http://j9d107.p.ssafy.io:9200\";\nexport var userInfoInquiry = function userInfoInquiry(_x, _x2) {\n  return (_ref = _ref || _asyncToGenerator(function* (accessToken, grantType) {\n    try {\n      var response = yield axios.get(apiAddress + `/api/v1/user`, {\n        headers: {\n          Authorization: `${grantType} ${accessToken}`\n        }\n      });\n      console.log(\"사용자 데이터 가져오기 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 데이터 가져오기 실패:\", error);\n      var _response = error.response;\n      return _response;\n    }\n  })).apply(this, arguments);\n};\nexport var userBirthdateChange = function userBirthdateChange(_x3, _x4, _x5) {\n  return (_ref2 = _ref2 || _asyncToGenerator(function* (birthDate, accessToken, grantType) {\n    try {\n      var response = yield axios.patch(apiAddress + `/api/v1/user/birthDate`, {\n        birthDate: birthDate\n      }, {\n        headers: {\n          Authorization: `${grantType} ${accessToken}`\n        }\n      });\n      console.log(\"사용자 생년월일 변경 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 생년월일 변경 실패:\", error);\n      var _response2 = error.response;\n      return _response2;\n    }\n  })).apply(this, arguments);\n};\nexport var userLogout = function userLogout(_x6, _x7, _x8) {\n  return (_ref3 = _ref3 || _asyncToGenerator(function* (refreshToken, accessToken, grantType) {\n    try {\n      console.log(refreshToken);\n      console.log(accessToken);\n      console.log(grantType);\n      var response = yield axios.patch(apiAddress + `/api/v1/user/logout`, {\n        refreshToken: refreshToken\n      }, {\n        headers: {\n          Authorization: `${grantType} ${accessToken}`\n        }\n      });\n      console.log(\"사용자 로그아웃 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 로그아웃 실패:\", error);\n      var _response3 = error.response;\n      return _response3;\n    }\n  })).apply(this, arguments);\n};\nexport var userPasswordChange = function userPasswordChange(_x9, _x10, _x11) {\n  return (_ref4 = _ref4 || _asyncToGenerator(function* (pwChangeData, accessToken, grantType) {\n    console.log(pwChangeData);\n    try {\n      var response = yield axios.patch(apiAddress + `/api/v1/user/password`, pwChangeData, {\n        headers: {\n          Authorization: `${grantType} ${accessToken}`\n        }\n      });\n      console.log(\"사용자 비밀번호 변경 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 비밀번호 변경 실패:\", error);\n      var _response4 = error.response;\n      return _response4;\n    }\n  })).apply(this, arguments);\n};\nexport var userCellPhoneNumberChange = function userCellPhoneNumberChange(_x12, _x13, _x14) {\n  return (_ref5 = _ref5 || _asyncToGenerator(function* (phoneNumber, accessToken, grantType) {\n    try {\n      var response = yield axios.patch(apiAddress + `/api/v1/user/phoneNumber`, {\n        phoneNumber: phoneNumber\n      }, {\n        headers: {\n          Authorization: `${grantType} ${accessToken}`\n        }\n      });\n      console.log(\"사용자 휴대전화 번호 변경 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 휴대전화 번호 변경 실패:\", error);\n      var _response5 = error.response;\n      return _response5;\n    }\n  })).apply(this, arguments);\n};\nexport var userWithdrawDotori = function userWithdrawDotori(_x15, _x16, _x17) {\n  return (_ref6 = _ref6 || _asyncToGenerator(function* (refreshToken, accessToken, grantType) {\n    try {\n      var response = yield axios.patch(apiAddress + `/api/v1/user/retire`, {\n        refreshToken: refreshToken\n      }, {\n        headers: {\n          Authorization: `${grantType} ${accessToken}`\n        }\n      });\n      console.log(\"사용자 탈퇴하기 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 탈퇴하기 실패:\", error);\n      var _response6 = error.response;\n      return _response6;\n    }\n  })).apply(this, arguments);\n};\nexport var userEmailCodeVerificate = function userEmailCodeVerificate(_x18, _x19) {\n  return (_ref7 = _ref7 || _asyncToGenerator(function* (email, emailVerificationCode) {\n    try {\n      var response = yield axios.post(apiAddress + `/api/v1/auth/email/check-code`, {\n        id: email,\n        code: emailVerificationCode\n      });\n      console.log(\"사용자 이메일 인증코드 검증 성공:\", response);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 이메일 인증코드 검증 실패:\", error);\n      var _response7 = error.response;\n      return _response7;\n    }\n  })).apply(this, arguments);\n};\nexport var userSendEmail = function userSendEmail(_x20) {\n  return (_ref8 = _ref8 || _asyncToGenerator(function* (email) {\n    try {\n      var response = yield axios.post(apiAddress + `/api/v1/auth/email/check-id?id=${email}`);\n      console.log(\"사용자 이메일 인증코드 전송 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 이메일 인증코드 전송 실패:\", error);\n      var _response8 = error.response;\n      return _response8;\n    }\n  })).apply(this, arguments);\n};\nexport var userTokenRefresh = function userTokenRefresh(_x21, _x22, _x23) {\n  return (_ref9 = _ref9 || _asyncToGenerator(function* (refreshToken, accessToken, grantType) {\n    try {\n      var response = yield axios.post(apiAddress + `/api/v1/auth/new-token`, {\n        refreshToken: refreshToken\n      }, {\n        headers: {\n          Authorization: `${grantType} ${accessToken}`\n        }\n      });\n      console.log(\"사용자 토큰 갱신 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 토큰 갱신 실패:\", error);\n      var _response9 = error.response;\n      return _response9;\n    }\n  })).apply(this, arguments);\n};\nexport var userLogin = function userLogin(_x24) {\n  return (_ref10 = _ref10 || _asyncToGenerator(function* (loginData) {\n    try {\n      var response = yield axios.post(apiAddress + `/api/v1/auth/signin`, loginData);\n      console.log(\"사용자 로그인 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 로그인 실패:\", error);\n      var _response10 = error.response;\n      return _response10;\n    }\n  })).apply(this, arguments);\n};\nexport var userSignup = function userSignup(_x25) {\n  return (_ref11 = _ref11 || _asyncToGenerator(function* (signupData) {\n    console.log(signupData);\n    try {\n      var response = yield axios.post(apiAddress + `/api/v1/auth/signup`, signupData);\n      console.log(\"사용자 회원가입 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 회원가입 실패:\", error);\n      var _response11 = error.response;\n      return _response11;\n    }\n  })).apply(this, arguments);\n};\nexport var userDotoriValueCheck = function userDotoriValueCheck(_x26, _x27, _x28) {\n  return (_ref12 = _ref12 || _asyncToGenerator(function* (dotoriValueCheckData, accessToken, grantType) {\n    try {\n      var response = yield axios.get(apiAddress + `/v1/reward/dotori`, dotoriValueCheckData, {\n        headers: {\n          Authorization: `${grantType} ${accessToken}`\n        }\n      });\n      console.log(\"사용자 현재 도토리 갯수 조회 성공:\", response.data);\n      return response;\n    } catch (error) {\n      console.error(\"사용자 현재 도토리 갯수 조회 실패:\", error);\n      var _response12 = error.response;\n      return _response12;\n    }\n  })).apply(this, arguments);\n};","map":{"version":3,"names":["axios","apiAddress","userInfoInquiry","_x","_x2","_ref","_asyncToGenerator","accessToken","grantType","response","get","headers","Authorization","console","log","data","error","apply","arguments","userBirthdateChange","_x3","_x4","_x5","_ref2","birthDate","patch","userLogout","_x6","_x7","_x8","_ref3","refreshToken","userPasswordChange","_x9","_x10","_x11","_ref4","pwChangeData","userCellPhoneNumberChange","_x12","_x13","_x14","_ref5","phoneNumber","userWithdrawDotori","_x15","_x16","_x17","_ref6","userEmailCodeVerificate","_x18","_x19","_ref7","email","emailVerificationCode","post","id","code","userSendEmail","_x20","_ref8","userTokenRefresh","_x21","_x22","_x23","_ref9","userLogin","_x24","_ref10","loginData","userSignup","_x25","_ref11","signupData","userDotoriValueCheck","_x26","_x27","_x28","_ref12","dotoriValueCheckData"],"sources":["C:/Users/SSAFY/Desktop/S09P22D107/Dotori/frontend/src/apis/userapi.js"],"sourcesContent":["// 유저 정보와 관련된 API들을 모아둠 users\r\n\r\nimport axios from \"axios\";\r\n// apiAddress는 수정 필요\r\nconst apiAddress = \"http://j9d107.p.ssafy.io:9200\";\r\n\r\n//USERS\r\n// 사용자 데이터 가져오기\r\nexport const userInfoInquiry = async (accessToken, grantType) => {\r\n  try {\r\n    const response = await axios.get(apiAddress + `/api/v1/user`, {\r\n      headers: {\r\n        Authorization: `${grantType} ${accessToken}`,\r\n      },\r\n    });\r\n    console.log(\"사용자 데이터 가져오기 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 데이터 가져오기 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// 사용자 생년월일 변경\r\nexport const userBirthdateChange = async (\r\n  birthDate,\r\n  accessToken,\r\n  grantType\r\n) => {\r\n  try {\r\n    const response = await axios.patch(\r\n      apiAddress + `/api/v1/user/birthDate`,\r\n      { birthDate: birthDate },\r\n      {\r\n        headers: {\r\n          Authorization: `${grantType} ${accessToken}`,\r\n        },\r\n      }\r\n    );\r\n    console.log(\"사용자 생년월일 변경 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 생년월일 변경 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// 사용자 로그아웃\r\nexport const userLogout = async (refreshToken, accessToken, grantType) => {\r\n  try {\r\n    console.log(refreshToken);\r\n    console.log(accessToken);\r\n    console.log(grantType);\r\n    const response = await axios.patch(\r\n      apiAddress + `/api/v1/user/logout`,\r\n      { refreshToken: refreshToken },\r\n      {\r\n        headers: {\r\n          Authorization: `${grantType} ${accessToken}`,\r\n        },\r\n      }\r\n    );\r\n    console.log(\"사용자 로그아웃 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 로그아웃 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// 사용자 비밀번호 변경\r\n// 데이터 양식\r\n// {\r\n//   \"beforePassword\" : {\r\n//     \"type\" : \"string\"\r\n//   },\r\n//   \"afterPassword\" : {\r\n//     \"type\" : \"string\"\r\n//   }\r\n// }\r\n//비밀번호 변경\r\nexport const userPasswordChange = async (\r\n  pwChangeData,\r\n  accessToken,\r\n  grantType\r\n) => {\r\n  console.log(pwChangeData);\r\n  try {\r\n    const response = await axios.patch(\r\n      apiAddress + `/api/v1/user/password`,\r\n      pwChangeData,\r\n      {\r\n        // const response = await axios.patch(apiAddress+`/v1/user/password`, {beforePassword: pwChangeData.beforePassword, afterPassword:pwChangeData.afterPassword}, {\r\n        headers: {\r\n          Authorization: `${grantType} ${accessToken}`,\r\n        },\r\n      }\r\n    );\r\n    console.log(\"사용자 비밀번호 변경 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 비밀번호 변경 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// 사용자 휴대전화 번호 변경\r\nexport const userCellPhoneNumberChange = async (\r\n  phoneNumber,\r\n  accessToken,\r\n  grantType\r\n) => {\r\n  try {\r\n    const response = await axios.patch(\r\n      apiAddress + `/api/v1/user/phoneNumber`,\r\n      { phoneNumber: phoneNumber },\r\n      {\r\n        headers: {\r\n          Authorization: `${grantType} ${accessToken}`,\r\n        },\r\n      }\r\n    );\r\n    console.log(\"사용자 휴대전화 번호 변경 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 휴대전화 번호 변경 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// 사용자 탈퇴하기\r\nexport const userWithdrawDotori = async (\r\n  refreshToken,\r\n  accessToken,\r\n  grantType\r\n) => {\r\n  try {\r\n    const response = await axios.patch(\r\n      apiAddress + `/api/v1/user/retire`,\r\n      { refreshToken: refreshToken },\r\n      {\r\n        headers: {\r\n          Authorization: `${grantType} ${accessToken}`,\r\n        },\r\n      }\r\n    );\r\n    console.log(\"사용자 탈퇴하기 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 탈퇴하기 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// 사용자 이메일 인증코드 검증\r\nexport const userEmailCodeVerificate = async (email, emailVerificationCode) => {\r\n  try {\r\n    const response = await axios.post(\r\n      apiAddress + `/api/v1/auth/email/check-code`,\r\n      { id: email, code: emailVerificationCode }\r\n    );\r\n    console.log(\"사용자 이메일 인증코드 검증 성공:\", response);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 이메일 인증코드 검증 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// 사용자 이메일 인증코드 전송\r\nexport const userSendEmail = async (email) => {\r\n  try {\r\n    // const response = await axios.post(apiAddress+`/v1/user/email/check-id`, {param: {id:email}});\r\n    const response = await axios.post(\r\n      apiAddress + `/api/v1/auth/email/check-id?id=${email}`\r\n    );\r\n    console.log(\"사용자 이메일 인증코드 전송 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 이메일 인증코드 전송 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// 사용자 토큰 갱신 -- 보류\r\nexport const userTokenRefresh = async (\r\n  refreshToken,\r\n  accessToken,\r\n  grantType\r\n) => {\r\n  try {\r\n    const response = await axios.post(\r\n      apiAddress + `/api/v1/auth/new-token`,\r\n      { refreshToken: refreshToken },\r\n      {\r\n        headers: {\r\n          Authorization: `${grantType} ${accessToken}`,\r\n        },\r\n      }\r\n    );\r\n    console.log(\"사용자 토큰 갱신 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 토큰 갱신 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// 사용자 로그인\r\nexport const userLogin = async (loginData) => {\r\n  try {\r\n    const response = await axios.post(\r\n      apiAddress + `/api/v1/auth/signin`,\r\n      loginData\r\n    );\r\n    console.log(\"사용자 로그인 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 로그인 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// 사용자 회원가입\r\nexport const userSignup = async (signupData) => {\r\n  // signupData.role = \"ROLE_USER\";\r\n  console.log(signupData);\r\n  try {\r\n    const response = await axios.post(\r\n      apiAddress + `/api/v1/auth/signup`,\r\n      signupData\r\n    );\r\n    console.log(\"사용자 회원가입 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 회원가입 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// reward\r\n// 사용자 현재 도토리 갯수 조회\r\nexport const userDotoriValueCheck = async (\r\n  dotoriValueCheckData,\r\n  accessToken,\r\n  grantType\r\n) => {\r\n  try {\r\n    const response = await axios.get(\r\n      apiAddress + `/v1/reward/dotori`,\r\n      dotoriValueCheckData,\r\n      {\r\n        headers: {\r\n          Authorization: `${grantType} ${accessToken}`,\r\n        },\r\n      }\r\n    );\r\n    console.log(\"사용자 현재 도토리 갯수 조회 성공:\", response.data);\r\n    return response;\r\n  } catch (error) {\r\n    console.error(\"사용자 현재 도토리 갯수 조회 실패:\", error);\r\n    const response = error.response;\r\n    return response;\r\n    // throw error;\r\n  }\r\n};\r\n\r\n// // 사용자 정보 조회\r\n// export const userInfoInquiry = async (infoInquiryData, accessToken) => {\r\n//   try {\r\n//     const response = await axios.get(apiAddress+`/v1/user`, infoInquiryData, {\r\n//       headers: {\r\n//         Authorization: `Bearer ${accessToken}`,\r\n//       },\r\n//     });\r\n//     console.log('사용자 정보 조회 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 정보 조회 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 회원가입\r\n// export const userSignup = async (signupData) => {\r\n//   signupData.role = \"ROLE_USER\";\r\n//   console.log(signupData)\r\n//   try {\r\n//     const response = await axios.post(apiAddress+`/v1/user/signup`, signupData);\r\n//     console.log('사용자 회원가입 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 회원가입 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 로그인\r\n// export const userLogin = async (loginData) => {\r\n//   try {\r\n//     const response = await axios.post(apiAddress+`/v1/user/signin`, loginData);\r\n//     console.log('사용자 로그인 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 로그인 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 로그아웃\r\n// export const userLogout = async (accesToken,refreshToken, grantType) => {\r\n//   console.log(refreshToken,'뭉',grantType)\r\n//   try {\r\n//     // const response = await axios.patch(apiAddress+`/v1/user/logout`, {params:{\"refreshToken\": refreshToken}},{\r\n//     const response = await axios.patch(apiAddress+`/v1/user/logout`, {params: {refreshToken: refreshToken,}},{\r\n//       headers: {\r\n//         // Authorization: `Bearer ${refreshToken}`,\r\n//         Authorization: `${grantType} ${accesToken}`,\r\n//       },\r\n//     });\r\n//     console.log('사용자 로그아웃 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 로그아웃 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 비밀번호 변경\r\n// export const userPasswordChange = async (pwChangeData, accessToken) => {\r\n//   try {\r\n//     const response = await axios.patch(apiAddress+`/v1/user/password`, pwChangeData, {\r\n//       headers: {\r\n//         Authorization: `Bearer ${accessToken}`,\r\n//       },\r\n//     });\r\n//     console.log('사용자 비밀번호 변경 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 비밀번호 변경 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 휴대전화 번호 변경\r\n// export const userCellPhoneNumberChange = async (cellPhoneNumberChangeData, accessToken) => {\r\n//   try {\r\n//     const response = await axios.patch(apiAddress+`/v1/user/phoneNumber`, cellPhoneNumberChangeData, {\r\n//       headers: {\r\n//         Authorization: `Bearer ${accessToken}`,\r\n//       },\r\n//     });\r\n//     console.log('사용자 휴대전화 번호 변경 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 휴대전화 번호 변경 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 생년월일 변경\r\n// export const userBirthdateChange = async (birthdateChangeData, accessToken) => {\r\n//   try {\r\n//     const response = await axios.patch(apiAddress+`/v1/user/birthDate`, birthdateChangeData, {\r\n//       headers: {\r\n//         Authorization: `Bearer ${accessToken}`,\r\n//       },\r\n//     });\r\n//     console.log('사용자 생년월일 변경 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 생년월일 변경 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 탈퇴하기\r\n// export const userExitDotori = async (exitDotoriData, accessToken) => {\r\n//   try {\r\n//     const response = await axios.patch(apiAddress+`/v1/user/retire`, exitDotoriData, {\r\n//       headers: {\r\n//         Authorization: `Bearer ${accessToken}`,\r\n//       },\r\n//     });\r\n//     console.log('사용자 탈퇴하기 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 탈퇴하기 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 아이디 중복 검사\r\n// export const userIdDuplicatedCheck = async (idDuplicatedCheckData) => {\r\n//   try {\r\n//     // const response = await axios.get(apiAddress+`/v1/user/${idDuplicatedCheckData.id}`, idDuplicatedCheckData);\r\n//     const response = await axios.get(apiAddress+`/v1/user/${idDuplicatedCheckData}`);\r\n//     console.log('사용자 아이디 중복 검사 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 아이디 중복 검사 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 이메일 인증코드 전송\r\n// export const userSendEmail = async (email) => {\r\n//   console.log(email)\r\n//   try {\r\n//     // const response = await axios.get(apiAddress+`/v1/user/${idDuplicatedCheckData.id}`, idDuplicatedCheckData);\r\n//     // const response = await axios.post(apiAddress+`/v1/user/email/check-id`, {param: {id:email}});\r\n//     const response = await axios.post(apiAddress+`/v1/user/email/check-id?id=${email}`);\r\n//     console.log('사용자 이메일 인증코드 전송 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 이메일 인증코드 전송 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 이메일 인증코드 검증\r\n// export const userEmailCodeVerificate = async (email, emailVerificationCode) => {\r\n//   console.log(emailVerificationCode)\r\n//   try {\r\n//     // const response = await axios.get(apiAddress+`/v1/user/${idDuplicatedCheckData.id}`, idDuplicatedCheckData);\r\n//     // const response = await axios.post(apiAddress+`/v1/user/email/check-code`, {code:emailVerificationCode});\r\n//     // const response = await axios.post(apiAddress+`/v1/user/email/check-code?id=${email}&code=${emailVerificationCode}`, {id:email, code:emailVerificationCode });\r\n//     const response = await axios.post(apiAddress+`/v1/user/email/check-code?`, {id:email, code:emailVerificationCode });\r\n//     console.log('사용자 이메일 인증코드 검증 성공:', response);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 이메일 인증코드 검증 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n\r\n// // 사용자 현재 코인 갯수 조회\r\n// export const userCoinValueCheck = async (coinValueCheckData, accessToken) => {\r\n//   try {\r\n//     const response = await axios.get(apiAddress+`/v1/reward/coin`, coinValueCheckData, {\r\n//       headers: {\r\n//           Authorization: `Bearer ${accessToken}`,\r\n//         },\r\n//     });\r\n//     console.log('사용자 현재 코인 갯수 조회 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 현재 코인 갯수 조회 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n// // 사용자 도토리를 코인전환\r\n// export const userChangeDotoriToCoin = async (changeDotoriToCoinData, accessToken) => {\r\n//   try {\r\n//     const response = await axios.patch(apiAddress+`/v1/reward`, changeDotoriToCoinData, {\r\n//       headers: {\r\n//           Authorization: `Bearer ${accessToken}`,\r\n//         },\r\n//     });\r\n//     console.log('사용자 도토리를 코인전환 성공:', response.data);\r\n//     return response;\r\n//   } catch (error) {\r\n//     console.error('사용자 도토리를 코인전환 실패:', error);\r\n//     const response = error.response\r\n//     return response\r\n//     // throw error;\r\n//   }\r\n// };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}