{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useRef, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport HeaderComponent from \"../Components/HeaderScreen\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useIsFocused } from \"@react-navigation/native\";\nimport { planClassifyChatGpt } from \"../../apis/planapi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PlanCreate4Screen(_ref) {\n  var _ref2;\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var grantType = useSelector(function (state) {\n    return state.user.grantType;\n  });\n  var accessToken = useSelector(function (state) {\n    return state.user.accessToken;\n  });\n  var refreshToken = useSelector(function (state) {\n    return state.user.refreshToken;\n  });\n  var dispatch = useDispatch();\n  var _route$params$planInf = route.params.planInfo,\n    categorise = _route$params$planInf.categorise,\n    categoryGroups = _route$params$planInf.categoryGroups;\n  var _useState = useState(route.params.planInfo),\n    _useState2 = _slicedToArray(_useState, 2),\n    planInfo = _useState2[0],\n    setPlanInfo = _useState2[1];\n  console.log(planInfo);\n  var isFocused = useIsFocused();\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    categoryData = _useState4[0],\n    setCategoryData = _useState4[1];\n  var _useState5 = useState(categoryData),\n    _useState6 = _slicedToArray(_useState5, 2),\n    data = _useState6[0],\n    setData = _useState6[1];\n  var doPlanClassifyChatGpt = function doPlanClassifyChatGpt() {\n    return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n      try {\n        var payload = {\n          categorise: categorise,\n          categoryGroups: categoryGroups\n        };\n        console.log(payload);\n        var response = yield planClassifyChatGpt(payload, accessToken, grantType);\n        if (response.status === 200) {\n          console.log(\"전체 계좌 리스트 불러오기 성공\");\n          setCategoryData(response.data);\n        } else {\n          console.log(\"전체 계좌 리스트 불러오기 실패\");\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    })).apply(this, arguments);\n  };\n  useEffect(function () {\n    if (isFocused) {\n      doPlanClassifyChatGpt();\n    }\n  }, [isFocused]);\n  var renderItem = function renderItem(_ref3) {\n    var item = _ref3.item,\n      index = _ref3.index,\n      drag = _ref3.drag,\n      isActive = _ref3.isActive;\n    return _jsxs(TouchableOpacity, {\n      style: _objectSpread(_objectSpread({}, styles.categoryGroup), {}, {\n        backgroundColor: isActive ? \"#E0E0E0\" : \"transparent\"\n      }),\n      onLongPress: drag,\n      children: [_jsx(Text, {\n        style: styles.inputText,\n        children: item.categoryGroupName\n      }), _jsx(View, {\n        style: styles.categoriesContainer,\n        children: item.categories && item.categories.map(function (category, idx) {\n          return _jsx(View, {\n            style: styles.categoryBox,\n            children: _jsxs(Text, {\n              style: styles.categoryText,\n              children: [category.categoryName, \" \", formatNumber(category.targetAmount), \"\\uC6D0\"]\n            })\n          }, idx);\n        })\n      })]\n    });\n  };\n  var formatNumber = function formatNumber(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n  };\n  var handleNextButton = function handleNextButton() {\n    navigation.navigate(\"PlanCreate5Screen\", {\n      planInfo: planInfo,\n      categoryData: categoryData\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(HeaderComponent, {\n      title: \"\\uACC4\\uD68D \\uC0DD\\uC131(4/5)\",\n      cancelNavi: \"PlanMainScreen\",\n      navigation: navigation\n    }), _jsxs(ScrollView, {\n      style: styles.header,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"\\uCE74\\uD14C\\uACE0\\uB9AC \\uBD84\\uB958\"\n      }), _jsx(Text, {\n        style: styles.subtitle,\n        children: \"\\uCE74\\uD14C\\uACE0\\uB9AC \\uADF8\\uB8F9\\uACFC \\uCE74\\uD14C\\uACE0\\uB9AC\\uB97C \\uD655\\uC778\\uD574\\uC8FC\\uC138\\uC694.\"\n      }), _jsxs(View, {\n        style: styles.center,\n        children: [_jsx(Image, {\n          style: styles.centerImage,\n          source: require(\"../../assets/images/Hamster/PlanCreateHamster.png\")\n        }), _jsx(Text, {\n          style: styles.questionText,\n          children: \"\\uC774 \\uBD84\\uB958\\uAC00 \\uB9DE\\uB098\\uC694?\"\n        }), _jsx(Text, {\n          style: styles.moveText,\n          children: \"\\uCE74\\uD14C\\uACE0\\uB9AC\\uB97C \\uB20C\\uB7EC\\uC11C \\uC62E\\uACA8\\uBCF4\\uC138\\uC694!\"\n        })]\n      }), categoryData && categoryData.map(function (group, index) {\n        return _jsxs(View, {\n          style: styles.categoryGroup,\n          children: [_jsx(Text, {\n            style: styles.inputText,\n            children: group.categoryGroupName\n          }), _jsx(View, {\n            style: styles.categoriesContainer,\n            children: group.categories.map(function (category, idx) {\n              return _jsx(View, {\n                style: styles.categoryBox,\n                children: _jsxs(Text, {\n                  style: styles.categoryText,\n                  children: [category.categoryName, \" \", formatNumber(category.targetAmount), \"\\uC6D0\"]\n                })\n              }, idx);\n            })\n          })]\n        }, index);\n      })]\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleNextButton,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"\\uB2E4\\uC74C\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"space-between\",\n    padding: 20,\n    backgroundColor: \"white\"\n  },\n  header: {\n    flex: 1,\n    marginTop: 90\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 10\n  },\n  subtitle: {\n    color: \"#7B7B7B\",\n    marginBottom: 40\n  },\n  inputText: {\n    fontSize: 16,\n    marginBottom: 10\n  },\n  input: {\n    width: \"100%\",\n    height: 50,\n    backgroundColor: \"#D9D9D920\",\n    borderWidth: 1,\n    borderColor: \"#BAC0CA\",\n    borderRadius: 10,\n    padding: 10,\n    marginBottom: 10\n  },\n  categoryText: {\n    fontSize: 12\n  },\n  button: {\n    height: 50,\n    backgroundColor: \"#FF965C\",\n    borderRadius: 8,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  buttonText: {\n    color: \"white\",\n    fontSize: 18\n  },\n  inputBehindText: {\n    color: \"#7B7B7B\",\n    marginBottom: 40,\n    fontSize: 12,\n    marginLeft: 10\n  },\n  rowContainer: {\n    flexDirection: \"row\"\n  },\n  addButton: {\n    flex: 1,\n    backgroundColor: \"#FF965C\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: 50,\n    marginLeft: 10,\n    borderRadius: 8\n  },\n  addButtonText: {\n    color: \"white\",\n    fontSize: 18\n  },\n  categoriesContainer: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\"\n  },\n  categoryBox: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    borderWidth: 1,\n    borderColor: \"#BAC0CA\",\n    borderRadius: 20,\n    padding: 8,\n    marginRight: 10,\n    marginBottom: 10\n  },\n  centerImage: {\n    width: 120,\n    height: 120,\n    marginBottom: 20\n  },\n  questionText: {\n    fontSize: 24\n  },\n  moveText: {\n    color: \"#7B7B7B\"\n  },\n  center: {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  categoryGroup: {\n    marginBottom: 20\n  }\n});","map":{"version":3,"names":["React","useState","useRef","useEffect","View","Text","TextInput","TouchableOpacity","StyleSheet","ScrollView","Image","HeaderComponent","useDispatch","useSelector","useIsFocused","planClassifyChatGpt","jsx","_jsx","jsxs","_jsxs","PlanCreate4Screen","_ref","_ref2","navigation","route","grantType","state","user","accessToken","refreshToken","dispatch","_route$params$planInf","params","planInfo","categorise","categoryGroups","_useState","_useState2","_slicedToArray","setPlanInfo","console","log","isFocused","_useState3","_useState4","categoryData","setCategoryData","_useState5","_useState6","data","setData","doPlanClassifyChatGpt","_asyncToGenerator","payload","response","status","error","apply","arguments","renderItem","_ref3","item","index","drag","isActive","style","_objectSpread","styles","categoryGroup","backgroundColor","onLongPress","children","inputText","categoryGroupName","categoriesContainer","categories","map","category","idx","categoryBox","categoryText","categoryName","formatNumber","targetAmount","num","toString","replace","handleNextButton","navigate","container","title","cancelNavi","header","subtitle","center","centerImage","source","require","questionText","moveText","group","button","onPress","buttonText","create","flex","justifyContent","padding","marginTop","fontSize","fontWeight","marginBottom","color","input","width","height","borderWidth","borderColor","borderRadius","alignItems","inputBehindText","marginLeft","rowContainer","flexDirection","addButton","addButtonText","flexWrap","marginRight"],"sources":["C:/Users/SSAFY/Desktop/S09P22D107/Dotori/frontend/src/screens/Plan/PlanCreate4Screen.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  ScrollView,\r\n  Image,\r\n} from \"react-native\";\r\n// import DraggableFlatList from \"volkeno-react-native-drag-drop\";\r\nimport HeaderComponent from \"../Components/HeaderScreen\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport { planClassifyChatGpt } from \"../../apis/planapi\";\r\n\r\nexport default function PlanCreate4Screen({ navigation, route }) {\r\n  // 토큰\r\n  const grantType = useSelector((state) => state.user.grantType);\r\n  const accessToken = useSelector((state) => state.user.accessToken);\r\n  const refreshToken = useSelector((state) => state.user.refreshToken);\r\n  const dispatch = useDispatch();\r\n  // 그 외\r\n  const { categorise, categoryGroups } = route.params.planInfo;\r\n\r\n  const [planInfo, setPlanInfo] = useState(route.params.planInfo);\r\n  console.log(planInfo);\r\n  const isFocused = useIsFocused();\r\n\r\n  const [categoryData, setCategoryData] = useState(null);\r\n  //   [\r\n  //   {\r\n  //     categoryGroupName: \"식비\",\r\n  //     categories: [\r\n  //       { name: \"점심\", amount: 5000 },\r\n  //       { name: \"저녁\", amount: 6000 },\r\n  //       { name: \"간식\", amount: 3000 },\r\n  //     ],\r\n  //   },\r\n  //   {\r\n  //     categoryGroupName: \"교통비\",\r\n  //     categories: [\r\n  //       { name: \"버스\", amount: 1200 },\r\n  //       { name: \"택시\", amount: 10000 },\r\n  //     ],\r\n  //   },\r\n  // ]\r\n  //   const categoryData = [\r\n  //     {\r\n  //       categoryGroupName: \"식비\",\r\n  //       categories: [\r\n  //         { name: \"점심\", amount: 5000 },\r\n  //         { name: \"저녁\", amount: 6000 },\r\n  //         { name: \"간식\", amount: 3000 },\r\n  //       ],\r\n  //     },\r\n  //     {\r\n  //       categoryGroupName: \"교통비\",\r\n  //       categories: [\r\n  //         { name: \"버스\", amount: 1200 },\r\n  //         { name: \"택시\", amount: 10000 },\r\n  //       ],\r\n  //     },\r\n  //     // ... 기타 카테고리 그룹들\r\n  //   ];\r\n  const [data, setData] = useState(categoryData);\r\n\r\n  const doPlanClassifyChatGpt = async () => {\r\n    try {\r\n      const payload = {\r\n        categorise: categorise,\r\n        categoryGroups: categoryGroups,\r\n      };\r\n      console.log(payload);\r\n      const response = await planClassifyChatGpt(\r\n        payload,\r\n        accessToken,\r\n        grantType\r\n      );\r\n      if (response.status === 200) {\r\n        console.log(\"전체 계좌 리스트 불러오기 성공\");\r\n        setCategoryData(response.data);\r\n      } else {\r\n        console.log(\"전체 계좌 리스트 불러오기 실패\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (isFocused) {\r\n      // do정보조회()\r\n      doPlanClassifyChatGpt();\r\n    }\r\n  }, [isFocused]);\r\n  //드래그앤 드롭.. 대실패 일단 보류\r\n  const renderItem = ({ item, index, drag, isActive }) => {\r\n    return (\r\n      <TouchableOpacity\r\n        style={{\r\n          ...styles.categoryGroup,\r\n          backgroundColor: isActive ? \"#E0E0E0\" : \"transparent\",\r\n        }}\r\n        onLongPress={drag}\r\n      >\r\n        <Text style={styles.inputText}>{item.categoryGroupName}</Text>\r\n        <View style={styles.categoriesContainer}>\r\n          {item.categories &&\r\n            item.categories.map((category, idx) => (\r\n              <View key={idx} style={styles.categoryBox}>\r\n                <Text style={styles.categoryText}>\r\n                  {category.categoryName} {formatNumber(category.targetAmount)}\r\n                  원\r\n                </Text>\r\n              </View>\r\n            ))}\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n\r\n  //   const [data, setData] = useState(categoryData);\r\n  //   const renderItem = ({ item, index, drag, isActive }) => {\r\n  //     return (\r\n  //       <TouchableOpacity\r\n  //         style={{\r\n  //           ...styles.categoryGroup,\r\n  //           backgroundColor: isActive ? \"#E0E0E0\" : \"transparent\",\r\n  //         }}\r\n  //         onLongPress={drag}\r\n  //       >\r\n  //         <Text style={styles.inputText}>{item.categoryGroupName}</Text>\r\n  //         <View style={styles.categoriesContainer}>\r\n  //           {item.categories.map((category, idx) => (\r\n  //             <View key={idx} style={styles.categoryBox}>\r\n  //               <Text style={styles.categoryText}>\r\n  //                 {category.name} {formatNumber(category.amount)}원\r\n  //               </Text>\r\n  //             </View>\r\n  //           ))}\r\n  //         </View>\r\n  //       </TouchableOpacity>\r\n  //     );\r\n  //   };\r\n  const formatNumber = (num) => {\r\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\r\n  };\r\n  const handleNextButton = () => {\r\n    navigation.navigate(\"PlanCreate5Screen\", {\r\n      planInfo: planInfo,\r\n      categoryData: categoryData,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <HeaderComponent\r\n        title=\"계획 생성(4/5)\"\r\n        cancelNavi=\"PlanMainScreen\"\r\n        navigation={navigation}\r\n      ></HeaderComponent>\r\n      <ScrollView style={styles.header}>\r\n        <Text style={styles.title}>카테고리 분류</Text>\r\n        <Text style={styles.subtitle}>\r\n          카테고리 그룹과 카테고리를 확인해주세요.\r\n        </Text>\r\n\r\n        <View style={styles.center}>\r\n          <Image\r\n            style={styles.centerImage}\r\n            source={require(\"../../assets/images/Hamster/PlanCreateHamster.png\")}\r\n          />\r\n          <Text style={styles.questionText}>이 분류가 맞나요?</Text>\r\n          <Text style={styles.moveText}>카테고리를 눌러서 옮겨보세요!</Text>\r\n        </View>\r\n\r\n        {categoryData &&\r\n          categoryData.map((group, index) => (\r\n            <View key={index} style={styles.categoryGroup}>\r\n              <Text style={styles.inputText}>{group.categoryGroupName}</Text>\r\n              <View style={styles.categoriesContainer}>\r\n                {group.categories.map((category, idx) => (\r\n                  <View key={idx} style={styles.categoryBox}>\r\n                    <Text style={styles.categoryText}>\r\n                      {category.categoryName}{\" \"}\r\n                      {formatNumber(category.targetAmount)}원\r\n                    </Text>\r\n                  </View>\r\n                ))}\r\n              </View>\r\n            </View>\r\n          ))}\r\n\r\n        {/* <DraggableFlatList\r\n          data={data}\r\n          renderItem={renderItem}\r\n          keyExtractor={(item, index) => `draggable-item-${index}`}\r\n          onDragEnd={({ data }) => setCategoryData(data)}\r\n        /> */}\r\n\r\n        {/* <Text style={styles.inputText}>등록된 카테고리 그룹</Text>\r\n        <View style={styles.categoriesContainer}>\r\n          {categoryGroups.map((categoryGroup, index) => (\r\n            <View key={index} style={styles.categoryBox}>\r\n              <Text style={styles.categoryText}>{categoryGroup.name} </Text>\r\n            </View>\r\n          ))}\r\n        </View> */}\r\n      </ScrollView>\r\n\r\n      <TouchableOpacity style={styles.button} onPress={handleNextButton}>\r\n        <Text style={styles.buttonText}>다음</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: \"space-between\",\r\n    padding: 20,\r\n    backgroundColor: \"white\",\r\n  },\r\n  header: {\r\n    flex: 1,\r\n    // justifyContent: \"center\",\r\n    // alignItems: \"center\",\r\n    marginTop: 90,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    marginBottom: 10,\r\n  },\r\n  subtitle: {\r\n    color: \"#7B7B7B\",\r\n    marginBottom: 40,\r\n  },\r\n  inputText: {\r\n    fontSize: 16,\r\n    marginBottom: 10,\r\n  },\r\n  input: {\r\n    width: \"100%\",\r\n    height: 50,\r\n    backgroundColor: \"#D9D9D920\",\r\n    borderWidth: 1,\r\n    borderColor: \"#BAC0CA\",\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n    // textAlign: \"center\",\r\n  },\r\n  categoryText: {\r\n    fontSize: 12,\r\n  },\r\n  button: {\r\n    height: 50,\r\n    backgroundColor: \"#FF965C\",\r\n    borderRadius: 8,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  buttonText: {\r\n    color: \"white\",\r\n    fontSize: 18,\r\n  },\r\n  inputBehindText: {\r\n    color: \"#7B7B7B\",\r\n    marginBottom: 40,\r\n    fontSize: 12,\r\n    marginLeft: 10,\r\n  },\r\n  rowContainer: {\r\n    flexDirection: \"row\",\r\n  },\r\n  addButton: {\r\n    flex: 1,\r\n    backgroundColor: \"#FF965C\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: 50,\r\n    marginLeft: 10,\r\n    borderRadius: 8,\r\n  },\r\n  addButtonText: {\r\n    color: \"white\",\r\n    fontSize: 18,\r\n  },\r\n  categoriesContainer: {\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n  },\r\n  categoryBox: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    borderWidth: 1,\r\n    borderColor: \"#BAC0CA\",\r\n    borderRadius: 20,\r\n    padding: 8,\r\n    marginRight: 10,\r\n    marginBottom: 10,\r\n  },\r\n  centerImage: {\r\n    width: 120,\r\n    height: 120,\r\n    marginBottom: 20,\r\n  },\r\n  questionText: {\r\n    fontSize: 24,\r\n  },\r\n  moveText: {\r\n    color: \"#7B7B7B\",\r\n  },\r\n  center: { justifyContent: \"center\", alignItems: \"center\" },\r\n  categoryGroup: { marginBottom: 20 },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}